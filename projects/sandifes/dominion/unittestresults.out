         ***** Unit test of gainCard() *****
Testing gainCard(): discard a copper...
Testing gainCard(): add a copper to deck...
Testing gainCard() add a copper to hand...
Check that copper supply count was reduced by 3...
Copper count: 7
Expected copper count: 7
Testing gainCard(): set copper supply to zero, should return -1...


***gainCard() TEST COMPLETED SUCCESSFULLY ***

         ***** Unit test of shuffle() *****

Test number 1  (Estates = 1, Coppers = 4):
Deck before...
1 1 4 4 4 4 4 1 4 4 
Deck after...
4 4 4 1 1 4 4 1 4 4 

Test number 2  (Estates = 1, Coppers = 4):
Deck before...
4 4 4 1 1 4 4 1 4 4 
Deck after...
1 4 4 4 1 4 4 1 4 4 

Test number 3  (Estates = 1, Coppers = 4):
Deck before...
1 4 4 4 1 4 4 1 4 4 
Deck after...
4 1 1 4 4 4 4 1 4 4 


AND, If the deck size is 0, shuffle should return -1
 

***shuffle() TEST COMPLETED SUCCESSFULLY***

         ***** Unit test of isGameOver() *****

isGameOver() returns a value of 1 if true

First check that initialize has populated all supply counts...

Test by setting the number of province cards to zero...

Test by setting any 3 supply piles to empty...


***isGameOver() TEST SUCCESSFULLY COMPLETED ***

         ***** Unit test of initializeGame() *****
After initialization, Player 0 should have 5 cards in hand and 5 cards in the draw pile.
Player 0 deck count: 5
Player 0 hand count: 5
Player 0 discard count: 0

Check supply counts...

Set the number of players to 10, function should return -1...

Set two kingdom cards the same, function should return -1...


***initializeGame() TEST SUCCESSFULLY COMPLETED ***

       ***** CARD TEST: ADVENTURER *****
Player 0 plays adventurer and gains 2 cards...
Hand count: 7
Expected hand count: 7

Checking that Player 0 gained 2 treasure cards...

Original treasure: 4
Treasure after playing adventurer: 6

Player 1 hand count should be unchanged...
Hand count: 0
Expected hand count: 0

Player 1 deck count should be unchanged... 
Deck count before: 10
Deck count after: 10

Checking Kingdom Card Piles...

Checking Victory Card Piles...

***ADVENTURER TEST COMPLETED SUCCESSFULLY***

       ***** CARD TEST: VILLAGE *****
Player 0 plays village and draws 1 card, gains 2 actions, and discards the village...
Hand count: 5
Expected hand count: 5

Player 0 deck count before: 5
Deck count after: 4
Expected deck count after: 4

Number of actions before: 1
Number of actions after: 3
Expected number of actions after: 3

Player 1 hand count should be unchanged...
Hand count: 0
Expected hand count: 0

Player 1 deck count should be unchanged... 
Deck count before: 10
Deck count after: 10

Checking Kingdom Card Piles...

Checking Victory Card Piles...

***VILLAGE TEST COMPLETED SUCCESSFULLY***

       ***** CARD TEST: GREAT HALL *****
Player 0 plays great hall and draws 1 card, gains 1 action, and discards the great hall.
When the great hall is first added to the player's cards, the player also gains one victory point...

Check if 1 card was drawn and 1 discarded...
Player 0 Hand count: 5
Expected hand count: 5

Player 0 deck count before: 5
Deck count after: 4
Expected deck count after: 4

Number of actions before: 1
Number of actions after: 2
Expected number of actions after: 2

Player 1 hand count should be unchanged...
Hand count: 0
Expected hand count: 0

Player 1 deck count should be unchanged... 
Deck count before: 10
Deck count after: 10


Add great hall to player 0 hand and check victory points...
Victory points before adding great hall: 1
Victory points after adding great hall: 2
Expected victory points after adding great hall: 2


Checking Kingdom Card Piles...

Checking Victory Card Piles...

***GREAT HALL TEST COMPLETED SUCCESSFULLY***

       ***** CARD TEST: SMITHY *****
Player 0 plays smithy and draws 3 cards and discards the smithy...
Hand count: 7
Expected hand count: 7

Player 0 deck count before: 5
Deck count after: 2
Expected deck count after: 2

Player 1 hand count should be unchanged...
Hand count: 0
Expected hand count: 0

Player 1 deck count should be unchanged... 
Deck count before: 10
Deck count after: 10

Checking Kingdom Card Piles...

Checking Victory Card Piles...

***SMITHY TEST COMPLETED SUCCESSFULLY***

File 'dominion.c'
Lines executed:32.57% of 568
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      265:    8:int compare(const void* a, const void* b) {
      265:    9:  if (*(int*)a > *(int*)b)
        7:   10:    return 1;
      258:   11:  if (*(int*)a < *(int*)b)
       69:   12:    return -1;
      189:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       89:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      890:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      810:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){
        8:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
       21:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       21:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       21:  209:  if (state->deckCount[player] < 1)
        1:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      220:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      603:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      423:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      200:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        4:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
       12:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       10:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        2:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        2:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       47:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       47:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       47:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       47:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       47:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       47:  576:    state->deckCount[player]--;
       47:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       47:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        1:  647:void cardAdventurer(int currentPlayer, struct gameState *state)
        -:  648:{
        -:  649:
        1:  650:int drawntreasure=0;
        -:  651:int cardDrawn;
        1:  652:int z = 0;
        -:  653:int temphandA[MAX_HAND];
        -:  654:
        4:  655:      while(drawntreasure<2){
        2:  656:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:	  shuffle(currentPlayer, state);
        -:  658:	}
        2:  659:	drawCard(currentPlayer, state);
        2:  660:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  661:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  662:	  drawntreasure++; //draw cards until 2 treasure cards are revealed
        -:  663:	else{
    #####:  664:	  temphandA[z]=cardDrawn;
    #####:  665:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	  z++;
        -:  667:	}
        -:  668:      }
        2:  669:      while(z-1>=0){
    #####:  670:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphandA[z-1]; // discard all cards in play that have been drawn
    #####:  671:	z=z-1;
        -:  672:      }
        -:  673:
        1:  674:}
        -:  675:
        -:  676:
        1:  677:void cardSmithy(int handPos, int currentPlayer, struct gameState *state)
        -:  678:{
        -:  679:int i;
        4:  680:for (i = 0; i < 3; i++)
        -:  681:	{
        3:  682:	  drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:      //discard card from hand
        1:  686:      discardCard(handPos, currentPlayer, state, 0);
        -:  687:
        1:  688:}
        -:  689:
        1:  690:void cardVillage(int handPos, int currentPlayer, struct gameState *state)
        -:  691:{
        -:  692:      //+1 Card
        1:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+2 Actions
        1:  696:      state->numActions = state->numActions + 2;
        -:  697:
        -:  698:      //discard played card from hand
        1:  699:      discardCard(handPos, currentPlayer, state, 0);
        1:  700:}
        -:  701:
        1:  702:void cardGreatHall(int handPos, int currentPlayer, struct gameState *state)
        -:  703:{
        -:  704:      //+1 Card
        1:  705:      drawCard(currentPlayer, state);
        -:  706:
        -:  707:      //+1 Actions
        1:  708:      state->numActions++;
        -:  709:
        -:  710:      //discard card from hand
        1:  711:      discardCard(handPos, currentPlayer, state, 0);
        1:  712:}
        -:  713:
    #####:  714:void cardSeaHag(int handPos, int currentPlayer, struct gameState *state)
        -:  715:{
        -:  716:      int i;
    #####:  717:      for (i = 0; i < state->numPlayers; i++){
    #####:  718:        if (i != currentPlayer){
    #####:  719:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  720:          state->discardCount[i]++;
    #####:  721:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  722:        }
        -:  723:      }
    #####:  724:}
        -:  725:
        -:  726:
    #####:  727:void cardOutpost(int handPos, int currentPlayer, struct gameState *state)
        -:  728:{
        -:  729:      //set outpost flag
    #####:  730:      state->outpostPlayed++;
        -:  731:
        -:  732:      //discard card
    #####:  733:      discardCard(handPos, currentPlayer, state, 0);
    #####:  734:}
        -:  735:
        4:  736:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  737:{
        -:  738:  int i;
        -:  739:  int j;
        -:  740:  int k;
        -:  741:  int x;
        -:  742:  int index;
        4:  743:  int currentPlayer = whoseTurn(state);
        4:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
        4:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
        4:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
        4:  750:  int z = 0;// this is the counter for the temp hand
        4:  751:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
        4:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        -:  760:
        -:  761:
        1:  762:      cardAdventurer(currentPlayer, state);
        -:  763:
        -:  764:
        -:  765:/*
        -:  766:      while(drawntreasure<2){
        -:  767:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  768:	  shuffle(currentPlayer, state);
        -:  769:	}
        -:  770:	drawCard(currentPlayer, state);
        -:  771:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  772:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  773:	  drawntreasure++;
        -:  774:	else{
        -:  775:	  temphand[z]=cardDrawn;
        -:  776:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  777:	  z++;
        -:  778:	}
        -:  779:      }
        -:  780:      while(z-1>=0){
        -:  781:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  782:	z=z-1;
        -:  783:      }
        -:  784:*/
        -:  785:
        1:  786:      return 0;
        -:  787:
        -:  788:    case council_room:
        -:  789:      //+4 Cards
    #####:  790:      for (i = 0; i < 4; i++)
        -:  791:	{
    #####:  792:	  drawCard(currentPlayer, state);
        -:  793:	}
        -:  794:
        -:  795:      //+1 Buy
    #####:  796:      state->numBuys++;
        -:  797:
        -:  798:      //Each other player draws a card
    #####:  799:      for (i = 0; i < state->numPlayers; i++)
        -:  800:	{
    #####:  801:	  if ( i != currentPlayer )
        -:  802:	    {
    #####:  803:	      drawCard(i, state);
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:      //put played card in played card pile
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
    #####:  810:      return 0;
        -:  811:
        -:  812:    case feast:
        -:  813:      //gain card with cost up to 5
        -:  814:      //Backup hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  816:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  817:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  818:      }
        -:  819:      //Backup hand
        -:  820:
        -:  821:      //Update Coins for Buy
    #####:  822:      updateCoins(currentPlayer, state, 5);
    #####:  823:      x = 1;//Condition to loop on
    #####:  824:      while( x == 1) {//Buy one card
    #####:  825:	if (supplyCount(choice1, state) <= 0){
        -:  826:	  if (DEBUG)
        -:  827:	    printf("None of that card left, sorry!\n");
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  831:	  }
        -:  832:	}
    #####:  833:	else if (state->coins < getCost(choice1)){
    #####:  834:	  printf("That card is too expensive!\n");
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  838:	  }
        -:  839:	}
        -:  840:	else{
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
    #####:  846:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  847:	  x = 0;//No more buying cards
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:	  }
        -:  852:
        -:  853:	}
        -:  854:      }
        -:  855:
        -:  856:      //Reset Hand
    #####:  857:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  858:	state->hand[currentPlayer][i] = temphand[i];
    #####:  859:	temphand[i] = -1;
        -:  860:      }
        -:  861:      //Reset Hand
        -:  862:
    #####:  863:      return 0;
        -:  864:
        -:  865:    case gardens:
    #####:  866:      return -1;
        -:  867:
        -:  868:    case mine:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      if (choice2 > treasure_map || choice2 < curse)
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      gainCard(choice2, state, 2, currentPlayer);
        -:  887:
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:
        -:  891:      //discard trashed card
    #####:  892:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  893:	{
    #####:  894:	  if (state->hand[currentPlayer][i] == j)
        -:  895:	    {
    #####:  896:	      discardCard(i, currentPlayer, state, 0);
    #####:  897:	      break;
        -:  898:	    }
        -:  899:	}
        -:  900:
    #####:  901:      return 0;
        -:  902:
        -:  903:    case remodel:
    #####:  904:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:
    #####:  911:      gainCard(choice2, state, 0, currentPlayer);
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
        -:  915:
        -:  916:      //discard trashed card
    #####:  917:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  918:	{
    #####:  919:	  if (state->hand[currentPlayer][i] == j)
        -:  920:	    {
    #####:  921:	      discardCard(i, currentPlayer, state, 0);
    #####:  922:	      break;
        -:  923:	    }
        -:  924:	}
        -:  925:
        -:  926:
    #####:  927:      return 0;
        -:  928:
        -:  929:    case smithy:
        -:  930:
        -:  931:
        1:  932:       cardSmithy(handPos, currentPlayer, state);
        -:  933:
        -:  934:
        -:  935: /*
        -:  936:      for (i = 0; i < 3; i++)
        -:  937:	{
        -:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
        -:  940:      //discard card from hand
        -:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:*/
        1:  943:      return 0;
        -:  944:
        -:  945:    case village:
        -:  946:
        1:  947:        cardVillage(handPos, currentPlayer, state);
        -:  948:
        -:  949:/*
        -:  950:      //+1 Card
        -:  951:      drawCard(currentPlayer, state);
        -:  952:
        -:  953:      //+2 Actions
        -:  954:      state->numActions = state->numActions + 2;
        -:  955:
        -:  956:      //discard played card from hand
        -:  957:      discardCard(handPos, currentPlayer, state, 0);
        -:  958:
        -:  959:*/
        1:  960:      return 0;
        -:  961:
        -:  962:    case baron:
    #####:  963:      state->numBuys++;//Increase buys by 1!
    #####:  964:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  965:	int p = 0;//Iterator for hand!
    #####:  966:	int card_not_discarded = 1;//Flag for discard set!
    #####:  967:	while(card_not_discarded){
    #####:  968:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  969:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  970:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  971:	    state->discardCount[currentPlayer]++;
    #####:  972:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  973:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  974:	    }
    #####:  975:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  976:	    state->handCount[currentPlayer]--;
    #####:  977:	    card_not_discarded = 0;//Exit the loop
        -:  978:	  }
    #####:  979:	  else if (p > state->handCount[currentPlayer]){
        -:  980:	    if(DEBUG) {
        -:  981:	      printf("No estate cards in your hand, invalid choice\n");
        -:  982:	      printf("Must gain an estate if there are any\n");
        -:  983:	    }
    #####:  984:	    if (supplyCount(estate, state) > 0){
    #####:  985:	      gainCard(estate, state, 0, currentPlayer);
    #####:  986:	      state->supplyCount[estate]--;//Decrement estates
    #####:  987:	      if (supplyCount(estate, state) == 0){
    #####:  988:		isGameOver(state);
        -:  989:	      }
        -:  990:	    }
    #####:  991:	    card_not_discarded = 0;//Exit the loop
        -:  992:	  }
        -:  993:
        -:  994:	  else{
    #####:  995:	    p++;//Next card
        -:  996:	  }
        -:  997:	}
        -:  998:      }
        -:  999:
        -: 1000:      else{
    #####: 1001:	if (supplyCount(estate, state) > 0){
    #####: 1002:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1003:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1004:	  if (supplyCount(estate, state) == 0){
    #####: 1005:	    isGameOver(state);
        -: 1006:	  }
        -: 1007:	}
        -: 1008:      }
        -: 1009:
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case great_hall:
        -: 1014:
        1: 1015:        cardGreatHall(handPos, currentPlayer, state);
        -: 1016:
        -: 1017:/*
        -: 1018:      //+1 Card
        -: 1019:      drawCard(currentPlayer, state);
        -: 1020:
        -: 1021:      //+1 Actions
        -: 1022:      state->numActions++;
        -: 1023:
        -: 1024:      //discard card from hand
        -: 1025:      discardCard(handPos, currentPlayer, state, 0);
        -: 1026:*/
        1: 1027:      return 0;
        -: 1028:
        -: 1029:    case minion:
        -: 1030:      //+1 action
    #####: 1031:      state->numActions++;
        -: 1032:
        -: 1033:      //discard card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:
    #####: 1036:      if (choice1)		//+2 coins
        -: 1037:	{
    #####: 1038:	  state->coins = state->coins + 2;
        -: 1039:	}
        -: 1040:
    #####: 1041:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1042:	{
        -: 1043:	  //discard hand
    #####: 1044:	  while(numHandCards(state) > 0)
        -: 1045:	    {
    #####: 1046:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1047:	    }
        -: 1048:
        -: 1049:	  //draw 4
    #####: 1050:	  for (i = 0; i < 4; i++)
        -: 1051:	    {
    #####: 1052:	      drawCard(currentPlayer, state);
        -: 1053:	    }
        -: 1054:
        -: 1055:	  //other players discard hand and redraw if hand size > 4
    #####: 1056:	  for (i = 0; i < state->numPlayers; i++)
        -: 1057:	    {
    #####: 1058:	      if (i != currentPlayer)
        -: 1059:		{
    #####: 1060:		  if ( state->handCount[i] > 4 )
        -: 1061:		    {
        -: 1062:		      //discard hand
    #####: 1063:		      while( state->handCount[i] > 0 )
        -: 1064:			{
    #####: 1065:			  discardCard(handPos, i, state, 0);
        -: 1066:			}
        -: 1067:
        -: 1068:		      //draw 4
    #####: 1069:		      for (j = 0; j < 4; j++)
        -: 1070:			{
    #####: 1071:			  drawCard(i, state);
        -: 1072:			}
        -: 1073:		    }
        -: 1074:		}
        -: 1075:	    }
        -: 1076:
        -: 1077:	}
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:    case steward:
    #####: 1081:      if (choice1 == 1)
        -: 1082:	{
        -: 1083:	  //+2 cards
    #####: 1084:	  drawCard(currentPlayer, state);
    #####: 1085:	  drawCard(currentPlayer, state);
        -: 1086:	}
    #####: 1087:      else if (choice1 == 2)
        -: 1088:	{
        -: 1089:	  //+2 coins
    #####: 1090:	  state->coins = state->coins + 2;
        -: 1091:	}
        -: 1092:      else
        -: 1093:	{
        -: 1094:	  //trash 2 cards in hand
    #####: 1095:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1096:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1097:	}
        -: 1098:
        -: 1099:      //discard card from hand
    #####: 1100:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case tribute:
    #####: 1104:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1105:	if (state->deckCount[nextPlayer] > 0){
    #####: 1106:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1107:	  state->deckCount[nextPlayer]--;
        -: 1108:	}
    #####: 1109:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1110:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1111:	  state->discardCount[nextPlayer]--;
        -: 1112:	}
        -: 1113:	else{
        -: 1114:	  //No Card to Reveal
        -: 1115:	  if (DEBUG){
        -: 1116:	    printf("No cards to reveal\n");
        -: 1117:	  }
        -: 1118:	}
        -: 1119:      }
        -: 1120:
        -: 1121:      else{
    #####: 1122:	if (state->deckCount[nextPlayer] == 0){
    #####: 1123:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1124:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1125:	    state->deckCount[nextPlayer]++;
    #####: 1126:	    state->discard[nextPlayer][i] = -1;
    #####: 1127:	    state->discardCount[nextPlayer]--;
        -: 1128:	  }
        -: 1129:
    #####: 1130:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1131:	}
    #####: 1132:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1133:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1134:	state->deckCount[nextPlayer]--;
    #####: 1135:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1136:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1137:	state->deckCount[nextPlayer]--;
        -: 1138:      }
        -: 1139:
    #####: 1140:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1141:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1142:	state->playedCardCount++;
    #####: 1143:	tributeRevealedCards[1] = -1;
        -: 1144:      }
        -: 1145:
    #####: 1146:      for (i = 0; i <= 2; i ++){
    #####: 1147:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1148:	  state->coins += 2;
        -: 1149:	}
        -: 1150:
    #####: 1151:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1152:	  drawCard(currentPlayer, state);
    #####: 1153:	  drawCard(currentPlayer, state);
        -: 1154:	}
        -: 1155:	else{//Action Card
    #####: 1156:	  state->numActions = state->numActions + 2;
        -: 1157:	}
        -: 1158:      }
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:    case ambassador:
    #####: 1163:      j = 0;		//used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:      if (choice2 > 2 || choice2 < 0)
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:
    #####: 1170:      if (choice1 == handPos)
        -: 1171:	{
    #####: 1172:	  return -1;
        -: 1173:	}
        -: 1174:
    #####: 1175:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1176:	{
    #####: 1177:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1178:	    {
    #####: 1179:	      j++;
        -: 1180:	    }
        -: 1181:	}
    #####: 1182:      if (j < choice2)
        -: 1183:	{
    #####: 1184:	  return -1;
        -: 1185:	}
        -: 1186:
        -: 1187:      if (DEBUG)
        -: 1188:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:      //increase supply count for choosen card by amount being discarded
    #####: 1191:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:      //each other player gains a copy of revealed card
    #####: 1194:      for (i = 0; i < state->numPlayers; i++)
        -: 1195:	{
    #####: 1196:	  if (i != currentPlayer)
        -: 1197:	    {
    #####: 1198:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1199:	    }
        -: 1200:	}
        -: 1201:
        -: 1202:      //discard played card from hand
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
        -: 1204:
        -: 1205:      //trash copies of cards returned to supply
    #####: 1206:      for (j = 0; j < choice2; j++)
        -: 1207:	{
    #####: 1208:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1209:	    {
    #####: 1210:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1211:		{
    #####: 1212:		  discardCard(i, currentPlayer, state, 1);
    #####: 1213:		  break;
        -: 1214:		}
        -: 1215:	    }
        -: 1216:	}
        -: 1217:
    #####: 1218:      return 0;
        -: 1219:
        -: 1220:    case cutpurse:
        -: 1221:
    #####: 1222:      updateCoins(currentPlayer, state, 2);
    #####: 1223:      for (i = 0; i < state->numPlayers; i++)
        -: 1224:	{
    #####: 1225:	  if (i != currentPlayer)
        -: 1226:	    {
    #####: 1227:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1228:		{
    #####: 1229:		  if (state->hand[i][j] == copper)
        -: 1230:		    {
    #####: 1231:		      discardCard(j, i, state, 0);
    #####: 1232:		      break;
        -: 1233:		    }
    #####: 1234:		  if (j == state->handCount[i])
        -: 1235:		    {
    #####: 1236:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1237:			{
        -: 1238:			  if (DEBUG)
        -: 1239:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1240:			}
    #####: 1241:		      break;
        -: 1242:		    }
        -: 1243:		}
        -: 1244:
        -: 1245:	    }
        -: 1246:
        -: 1247:	}
        -: 1248:
        -: 1249:      //discard played card from hand
    #####: 1250:      discardCard(handPos, currentPlayer, state, 0);
        -: 1251:
    #####: 1252:      return 0;
        -: 1253:
        -: 1254:
        -: 1255:    case embargo:
        -: 1256:      //+2 Coins
    #####: 1257:      state->coins = state->coins + 2;
        -: 1258:
        -: 1259:      //see if selected pile is in play
    #####: 1260:      if ( state->supplyCount[choice1] == -1 )
        -: 1261:	{
    #####: 1262:	  return -1;
        -: 1263:	}
        -: 1264:
        -: 1265:      //add embargo token to selected supply pile
    #####: 1266:      state->embargoTokens[choice1]++;
        -: 1267:
        -: 1268:      //trash card
    #####: 1269:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1270:      return 0;
        -: 1271:
        -: 1272:    case outpost:
        -: 1273:
    #####: 1274:        cardOutpost(handPos, currentPlayer, state);
        -: 1275:/*
        -: 1276:      //set outpost flag
        -: 1277:      state->outpostPlayed++;
        -: 1278:
        -: 1279:      //discard card
        -: 1280:      discardCard(handPos, currentPlayer, state, 0);
        -: 1281:*/
    #####: 1282:      return 0;
        -: 1283:
        -: 1284:    case salvager:
        -: 1285:      //+1 buy
    #####: 1286:      state->numBuys++;
        -: 1287:
    #####: 1288:      if (choice1)
        -: 1289:	{
        -: 1290:	  //gain coins equal to trashed card
    #####: 1291:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1292:	  //trash card
    #####: 1293:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1294:	}
        -: 1295:
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1298:      return 0;
        -: 1299:
        -: 1300:    case sea_hag:
        -: 1301:
    #####: 1302:        cardSeaHag(handPos, currentPlayer, state);
        -: 1303:/*
        -: 1304:      for (i = 0; i < state->numPlayers; i++){
        -: 1305:	if (i != currentPlayer){
        -: 1306:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1307:	  state->discardCount[i]++;
        -: 1308:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1309:	}
        -: 1310:      }
        -: 1311:*/
    #####: 1312:      return 0;
        -: 1313:
        -: 1314:    case treasure_map:
        -: 1315:      //search hand for another treasure_map
    #####: 1316:      index = -1;
    #####: 1317:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1318:	{
    #####: 1319:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1320:	    {
    #####: 1321:	      index = i;
    #####: 1322:	      break;
        -: 1323:	    }
        -: 1324:	}
    #####: 1325:      if (index > -1)
        -: 1326:	{
        -: 1327:	  //trash both treasure cards
    #####: 1328:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1329:	  discardCard(index, currentPlayer, state, 1);
        -: 1330:
        -: 1331:	  //gain 4 Gold cards
    #####: 1332:	  for (i = 0; i < 4; i++)
        -: 1333:	    {
    #####: 1334:	      gainCard(gold, state, 1, currentPlayer);
        -: 1335:	    }
        -: 1336:
        -: 1337:	  //return success
    #####: 1338:	  return 1;
        -: 1339:	}
        -: 1340:
        -: 1341:      //no second treasure_map found in hand
    #####: 1342:      return -1;
        -: 1343:    }
        -: 1344:
    #####: 1345:  return -1;
        -: 1346:}
        -: 1347:
        3: 1348:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1349:{
        -: 1350:
        -: 1351:  //if card is not trashed, added to Played pile
        3: 1352:  if (trashFlag < 1)
        -: 1353:    {
        -: 1354:      //add card to played pile
        3: 1355:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1356:      state->playedCardCount++;
        -: 1357:    }
        -: 1358:
        -: 1359:  //set played card to -1
        3: 1360:  state->hand[currentPlayer][handPos] = -1;
        -: 1361:
        -: 1362:  //remove card from player's hand
        3: 1363:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1364:    {
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        3: 1368:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1369:    {
        -: 1370:      //reduce number of cards in hand
    #####: 1371:      state->handCount[currentPlayer]--;
        -: 1372:    }
        -: 1373:  else
        -: 1374:    {
        -: 1375:      //replace discarded card with last card in hand
        3: 1376:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1377:      //set last card to -1
        3: 1378:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1379:      //reduce number of cards in hand
        3: 1380:      state->handCount[currentPlayer]--;
        -: 1381:    }
        -: 1382:
        3: 1383:  return 0;
        -: 1384:}
        -: 1385:
        4: 1386:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1387:{
        -: 1388:  //Note: supplyPos is enum of choosen card
        -: 1389:
        -: 1390:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1391:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1392:    {
        1: 1393:      return -1;
        -: 1394:    }
        -: 1395:
        -: 1396:  //added card for [whoseTurn] current player:
        -: 1397:  // toFlag = 0 : add to discard
        -: 1398:  // toFlag = 1 : add to deck
        -: 1399:  // toFlag = 2 : add to hand
        -: 1400:
        3: 1401:  if (toFlag == 1)
        -: 1402:    {
        1: 1403:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1404:      state->deckCount[player]++;
        -: 1405:    }
        2: 1406:  else if (toFlag == 2)
        -: 1407:    {
        1: 1408:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1409:      state->handCount[player]++;
        -: 1410:    }
        -: 1411:  else
        -: 1412:    {
        1: 1413:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1414:      state->discardCount[player]++;
        -: 1415:    }
        -: 1416:
        -: 1417:  //decrease number in supply pile
        3: 1418:  state->supplyCount[supplyPos]--;
        -: 1419:
        3: 1420:  return 0;
        -: 1421:}
        -: 1422:
        8: 1423:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1424:{
        -: 1425:  int i;
        -: 1426:
        -: 1427:  //reset coin count
        8: 1428:  state->coins = 0;
        -: 1429:
        -: 1430:  //add coins for each Treasure card in player's hand
       48: 1431:  for (i = 0; i < state->handCount[player]; i++)
        -: 1432:    {
       40: 1433:      if (state->hand[player][i] == copper)
        -: 1434:	{
       32: 1435:	  state->coins += 1;
        -: 1436:	}
        8: 1437:      else if (state->hand[player][i] == silver)
        -: 1438:	{
    #####: 1439:	  state->coins += 2;
        -: 1440:	}
        8: 1441:      else if (state->hand[player][i] == gold)
        -: 1442:	{
    #####: 1443:	  state->coins += 3;
        -: 1444:	}
        -: 1445:    }
        -: 1446:
        -: 1447:  //add bonus
        8: 1448:  state->coins += bonus;
        -: 1449:
        8: 1450:  return 0;
        -: 1451:}
        -: 1452:
        -: 1453:
        -: 1454://end of dominion.c
        -: 1455:
